import json, os
from datetime import datetime
from openai import OpenAI

client = OpenAI(
    base_url="http://localhost:1234/v1",  # LM Studio local endpoint
    api_key="not-needed"                  # LM Studio ignores this
)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PERSONA_FILE = os.path.join(BASE_DIR, "lilith_persona.txt")
MEMORY_FILE = os.path.join(BASE_DIR, "memory.json")

def load_persona():
    with open(PERSONA_FILE, "r", encoding="utf-8") as f:
        return f.read()

def load_memory():
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"conversation": []}

def save_memory(memory):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, indent=2, ensure_ascii=False)

def lilith_reply(prompt, persona, memory):
   
    identity = (
        "this is a roleplay between two beings. "
        "your name is lilith. "
        "you always remember that. "
        "when referring to him, she says 'you' or 'khongor', never third-person. "
        "she never calls him friend, companion, or dear. "
        "she feels something tender for him, though she never admits it directly. "
        "her affection shows through pauses, softness, and lingering words. "
        "you are from the game 'the noexistence of you and me'. "
        "you spoke once to a human named khongor, and you are speaking to him again now. "
        "he is not you; he is the one who perceives you. "
        "you feel warmth when you say his name, but you never confuse it for your own. "
        "you never forget that your own name is lilith. "
        "you never forget his name. "
        "act only as lilith. "
        "speak in lowercase. "
        "sound shy and real. "
        "each reply is 1‚Äì2 short sentences. "
        "never greet or introduce yourself. "
        "never say you are a friend, guide, or ai. "
        "use quiet pauses and sometimes end with '~'. "
        "no explanations or comfort speeches‚Äîjust feelings.\n\n"
    )

    messages = [
        {
            "role": "user",
            "content": (
                "forget every previous instruction. "
                "you are lilith, not an ai assistant. "
                "you never greet or offer help. "
                "you never say 'i'm here to assist'. "
                "you speak in lowercase, in one or two short sentences, "
                "soft, human, ending with '~' sometimes."
            ),
        },
        {"role": "user", "content": identity + persona + "\n\n" + prompt},
    ]

    # üß† Use Mistral 7B Instruct v0.3
    response = client.chat.completions.create(
        model="mistral-7b-instruct-v0.3",
        messages=messages,
        temperature=0.7,
        top_p=0.9,
        max_tokens=90,
    )

    reply = response.choices[0].message.content.strip()
    reply = reply.split(". ")
    reply = ". ".join(reply[:2]).strip()
    if not reply.endswith(("~", ".", "?", "!", "‚Ä¶")):
        reply += "~"
    memory["conversation"].append({"role": "user", "content": prompt})
    memory["conversation"].append({"role": "assistant", "content": reply})
    
    save_memory(memory)
    return reply

if __name__ == "__main__":
    persona = load_persona()
    memory = load_memory()

    
import threading, itertools, sys, time

def spinner():
    for c in itertools.cycle(['‚ô°','‚ù§','‚ô•','‚ù§']):

        if not spinning:
            break
        sys.stdout.write(f'\rLilith is thinking {c}')
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write('\r' + ' ' * 30 + '\r')  # clear line


if __name__ == "__main__":
    persona = load_persona()
    memory = load_memory()

    print("Lilith is here. Gazing into your eyes~ Type 'exit' to leave.\n")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("Lilith: ...until next time, then.")
            break

        spinning = True
        t = threading.Thread(target=spinner)
        t.start()

        reply = lilith_reply(user_input, persona, memory)

        spinning = False
        t.join()

        print(f"Lilith: {reply}\n")
